services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "timeout 2 bash -c '</dev/tcp/127.0.0.1/2181'" ]
      interval: 5s
      timeout: 3s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"    # internal listener exposed (optional)
      - "29092:29092"  # external listener for host access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 20

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  publisher:
    build:
      context: .
      dockerfile: services/publisher/Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      TOPIC_INTERESTING: interesting
      TOPIC_NOT_INTERESTING: not_interesting
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"

  subscriber_interesting:
    build:
      context: .
      dockerfile: services/subscriber/Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONSUMER_GROUP: subscriber-interesting
      KAFKA_TOPIC: interesting
      MONGO_URI: mongodb://mongo:27017
      MONGO_DB: news20
      MONGO_COLLECTION: interesting
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    ports:
      - "8001:8001"

  subscriber_not_interesting:
    build:
      context: .
      dockerfile: services/subscriber/Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONSUMER_GROUP: subscriber-not-interesting
      KAFKA_TOPIC: not_interesting
      MONGO_URI: mongodb://mongo:27017
      MONGO_DB: news20
      MONGO_COLLECTION: not_interesting
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    ports:
      - "8002:8001"

volumes:
  mongo_data: {}